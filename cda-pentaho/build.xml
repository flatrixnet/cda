<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See common_build.xml for more details
============================================================================-->
<project name="Community Data Access" basedir="." default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the CDA project
    and works with the common_build.xml file.
  </description>

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="common_build.xml"/>

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->

<!--
  <target name='dist-solution'>
    <copy todir="${solution.stage.dir}" overwrite='true'>
      <fileset dir='solution'>
      <include name=''>
    </copy>
  </target>
-->


 <!-- Define the Sonar task if this hasn't been done in a common script -->
  <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
    <classpath path="sonar-ant-task-1.3.jar" />
  </taskdef>
  
 



  <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath"/>
        <fileset dir="runtime-lib">
          <include name="**/*.jar" />
        </fileset>
        
      </classpath>
      <src path="${src.dir}"/>
    </javac>
  </target>

  <property name="plugin.name"
            value="cda"
            description="Name of the plugin"/>

  <property name="resource.dir"
            value="resources"
            description="Name of the resource directory"/>

  <property name="stage.dir"
            value="${bin.dir}/stage"
            description="Name of the resource directory"/>

  <property name="samples.stage.dir"
            value="${bin.dir}/stage-samples"
            description="Name of the resource directory" />
  <property name="runtimelib.dir"
            value="${basedir}/runtime-lib"
            description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)" />

  <tstamp/>

  <!-- Build the project.revision property -->
  <property name="distribution.version" value="${project.stage}-${project.version}"/>


  <echo>distribution.version = ${distribution.version}</echo>

  <target name="dist" depends="clean,resolve,jar,dist-plugin,dist-samples"/>
  <target name="dist-compile" depends="jar,dist-plugin"/>

  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${distribution.version}.zip"/>
  <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${distribution.version}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${distribution.version}.zip"/>



 <!-- Add the target -->
 
 <target name="check-sonar-props">
      <available file="/home/tomcat/sonar.properties" property="sonar.props"/>    
      <echo>${sonar.props}</echo>
 </target>


<target name="read-sonar-props" depends="check-sonar-props" if="sonar.props">
<echo>Prop file exists</echo>
<loadproperties srcFile="/home/tomcat/sonar.properties"/>
</target>
 
  <target name="sonar" depends='read-sonar-props'>
    <!-- list of mandatories Sonar properties -->
    <property name="sonar.sources" value="${src.dir}" />
 
    <!-- list of optional Sonar properties -->
    <property name="sonar.binaries" value="${classes.dir}" />
    
    <sonar:sonar key="pt.webdetails:CDA" version="${distribution.version}" xmlns:sonar="antlib:org.sonar.ant"/>
  </target>



  <!-- Overriding resolve target so we can add resolve-dev -->
  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />


  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="${runtimelib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>  



  <!--=======================================================================
              dist

              Creates a distribution of this project's plugin zip
              ====================================================================-->
  <target name="dist-plugin" depends="jar" description="Creates a distribution">

    <!-- delete and re-create the plugin dist folder tree -->
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${stage.dir}/${plugin.name}/lib"/>

    <!-- copy the plugin jar to the plugin dist lib folder -->
    <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
      <fileset dir="${dist.dir}">
        <include name="${ivy.artifact.id}-${project.revision}.jar"/>
      </fileset>
      <fileset dir="${devlib.dir}">
        <include name="**/*.jar"/>
      </fileset>
  <fileset dir="runtime-lib">
        <include name="**/*.jar"/>
        <exclude name="**/batik-js-1.7.jar"/>
      </fileset>      
    </copy>


    <!-- Copy the plugin.xml and any other files from the resource dir -->
    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${resource.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${basedir}">
        <include name="readme.txt"/>
      </fileset>
    </copy>

    <!-- create the version file -->
	<tstamp/>			
	<property name="sequential.build.id" value="manual-${DSTAMP}"/>

	<echo file="${stage.dir}/${plugin.name}/version.xml" message="&lt;version branch='TRUNK'  buildId='${sequential.build.id}'>${distribution.version}&lt;/version>"/>		   

    <replace file="${stage.dir}/${plugin.name}/cachemanager/cache.html" token="@@VERSION@@" value="${distribution.version}"/> 

    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.zipfile}"
         basedir="${stage.dir}"
         includes="cda/**/*"
         excludes="**/Thumbs.db"/>
         
         
	<echo file="${dist.dir}/marketplace.xml">&lt;version>
	    &lt;branch>TRUNK&lt;/branch>
		&lt;version>${distribution.version}&lt;/version>
		&lt;name>Trunk&lt;/name>
		&lt;package_url>http://ci.analytical-labs.com/job/Webdetails-CDA/lastSuccessfulBuild/artifact/dist/cda-TRUNK-SNAPSHOT.zip&lt;/package_url>
		&lt;samples_url>http://ci.analytical-labs.com/job/Webdetails-CDA/lastSuccessfulBuild/artifact/dist/cda-samples-TRUNK-SNAPSHOT.zip&lt;/samples_url>
		&lt;description>Trunk Snapshot. Get the latest, edgy, still work in progress features here...&lt;/description>
		&lt;build_id>${sequential.build.id}&lt;/build_id>
		&lt;/version>	</echo>         

  </target>
  
  <!-- ================ 
      Legacy Compat
      ================ --> 
  <target name="resolve-legacy" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="legacy" />
    <ivy:retrieve conf="legacy" pattern="${lib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>
  <target name="dist-legacy" depends="clean,resolve-legacy,jar,dist-plugin"/>
  
  
  <!-- ================= --> 

  <!--=======================================================================
              dist-samples

              Creates a distribution of this project's samples
              ====================================================================-->
  <target name="dist-samples" depends="init">

    <mkdir dir="${samples.stage.dir}"/>

    <!-- copy over all the xactions within the cdf-samples folder -->
    <copy todir="${samples.stage.dir}/bi-developers" overwrite="true" >
      <fileset dir="solution/bi-developers"></fileset>
    </copy>

    <replace file="${samples.stage.dir}/bi-developers/${plugin.name}/template.html" token="@@VERSION@@" value="${distribution.version}"/> 

    <zip zipfile="${dist.dir}/${plugin.samples.zipfile}"
         basedir="${samples.stage.dir}/bi-developers"
         includes="**/*"
         excludes="**/Thumbs.db"
         />
  </target>


  <!--=======================================================================
              install-plugin

              Installs the plugin locally
              ====================================================================-->
  <target name="install-plugin" depends="clean, jar, dist-plugin,dist-samples" description="Installs the plugin locally">

    <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>

    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy samples -->
    <copy todir="${plugin.local.install.solutions.dir}/plugin-samples">
      <fileset dir="${samples.stage.dir}/bi-developers/">
        <include name="**/*" />
      </fileset>
    </copy>

    <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}"
         dest="${stage.dir}/blah.html"/>

  </target>

  <!--=======================================================================
    install-plugin

    Installs the plugin locally
    ====================================================================-->
  <target name="run-test" depends="jar" description="Runs a test">

    <java classname="pt.webdetails.cda.CdaExecutor">
      <classpath>
        <pathelement  path="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar"/>
        <pathelement  path="${resource.dir}"/>
        <fileset dir="lib">
          <include name="**/*.jar"/>
        </fileset>

      </classpath>
    </java>


  </target>


  <!--=======================================================================
          publish-pentaho-nojar (override)

          Publishes the jar and plugin zip package to the Maven repository
          ====================================================================-->
  <target name="publish-pentaho-nojar"
          depends="install-antcontrib,create-pom,ivy.deliver">
    <ant antfile="common_build.xml" target="publish-pentaho-nojar"/>

    <ivy:makepom ivyfile="package-ivy.xml" pomfile="plugin-pom.xml"/>
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="samples-pom.xml"/>
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="solution-pom.xml"/>

    <replace file="plugin-pom.xml" token="jar" value="zip"/>
    <replace file="plugin-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}"/>
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="plugin-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.zipfile}"/>
    </antcall>

    <replace file="samples-pom.xml" token="jar" value="zip"/>
    <replace file="samples-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-samples"/>
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="samples-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.samples.zipfile}"/>
    </antcall>

    <!-- CDA is not currently building a solutions bundle, so this is disabled for now
    <replace file="solution-pom.xml" token="jar" value="zip"/>
    <replace file="solution-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-solution"/>
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="solution-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.solution.zipfile}"/>
    </antcall> -->
  </target>
</project>
